m904-968-87
==사용자정의 예외
declare
--예외이름 exception;
begin
~~~
--raise 예외이름;
exception
	when 예외이름 then
		처리내용
end;
/
--사번과 급여를 입력받아 해당 사원의 급여를 수정
--단, 급여가 2000보다 작으면 예외발생
==프로시져: 자주 사용되는 sql 또는 pl-sql을 미리 컴파일하여 디비에 저장한 객체
어플리케이션에서 많이 사용
create procedure 프로시져명
alter procedure 프로시져명
drop procedure 프로시져명
show error
--파라미터변수:변수선언시 길이를 주지 않는다.
in : 프로시져 호출시 서버로 값을 가지고 들어가는 변수, 기본값으로 생략가능
out: 프로시져 처리된 결과를 반환하는 함수
형식)
create or replace procedure 프로시져명
(파라미터변수)
is
변수선언
begin

end;
/
--사번을 입력받아 해당 사원을 삭제
create or replace procedure p1
( no number)
is
begin
delete personnel where pno=no;
end;
/
--show error
exec p1(1111)
select * from personnel;
exec p1(1123)
--사번과 급여를 입력받아 해당 사원의 급여수정
create or replace procedure p2
( no number,
  won number)
is
begin
update personnel set pay=won where pno=no;
end;
/
execute p2(1112,3333)
select * from personnel;
--부서번호와 보너스비율을 입력받아 해당 부서의 보너스 금액을 수정
--단, 보너스비율은 5%~20% 사이여야 함
create or replace procedure p3
( vdno personnel.dno%type,
  rate number)
is
minrate number :=0.05;
maxrate number :=0.2;
invalidrate exception;
invaliddno exception;
begin
if rate between minrate and maxrate then
	update personnel set bonus=pay*rate where dno=vdno;
	if sql%notfound then
		raise invaliddno;
	end if;
else
	raise invalidrate;
end if;
exception
	when invalidrate then
		dbms_output.put_line('보너스 비율을 확인하세요');
	when invaliddno then
		dbms_output.put_line('부서번호를 확인하세요');		
end;
/
exec p3(10,0.9)
select * from personnel;
exec p3(50,0.1)
--두수를 입력받아 곱을 반환
create or replace procedure p4
( n1 number,
  n2 number,
  n3 out number)
is
begin
	n3:=n1*n2;
end;
/
--실행시
variable result number 
exec p4(3,4,:result)
print result
==퍼스널 테이블에 기본키제약 추가
alter table personnel
	add constraint personnel_pno_p primary key(pno);
신입사원 등록(사번,이름,부서번호를 입력)
단 해당 부서에 직원이 없으면 예외처리
create or replace procedure p5
(vpno personnel.pno%type,
 vpname personnel.pname%type,
 vdno personnel.dno%type)
is
invaliddno exception;
cnt number;
begin
select count(*) into cnt from division where dno=vdno;
if cnt<1 then
	raise invaliddno;
end if;
insert into personnel (pno,pname,dno) values (vpno,vpname,vdno);
exception
	when invaliddno then
		dbms_output.put_line('부서번호를 확인하세요');
	when others then
		dbms_output.put_line('관리자에게 문의하세요');	
end;
/
exec p5(1,'장화',10)
exec p5(2,'홍련',33)
exec p5(3,'심청',77)
exec p5(1,'심청',20)
--함수: 리턴이 있다는것 제외하고는 프로시져와 동일
  반드시 리턴값이 있음, 복잡하거나 어려운 계산인경우 생성하여 사용
형식)
create or replace function 함수명
(파라미터변수)
return datatype
is
변수선언
begin

end;
/
select goname,gojumin from gogek;
create or replace function sexy
(jumin gogek.gojumin%type)
return varchar2
is
result varchar2(10);
begin
if substr(jumin,8,1)=1 or substr(jumin,8,1)=3 then
	result:='남자';
else
	result:='여자';
end if;
return result;
end;
/
select goname,gojumin,sexy(gojumin) from gogek;
--
select saname,sapay,deptno from sawon;
create or replace function fmaxpay
(vdeptno sawon.deptno%type)
return number
is
maxpay number;
begin
select max(sapay) into maxpay from sawon where deptno=vdeptno;
return maxpay;
end;
/
select saname,sapay,deptno,fmaxpay(deptno) from sawon;
==트리거(trigger:연쇄작용,방아쇠)
제약조건으로 구현되지 못하는 부분을 구현시 사용, 국민연금이나 급여계산등
데이터베이스의 이벤트에 반응하여 실행되는 프로그램 단위
자동호출
create trigger 트리거명
	타이밍 이벤트 on 테이블명
begin
	....
end;
/
create table division_history(
	memo varchar2(30)
);
select * from division_history;
create trigger t1
	after insert on division
begin
	insert into division_history values (sysdate||'입력작업');
end;
/
insert into division values (1,'전산실','123','제주');
select * from division;
select * from division_history;
insert into division values (2,'관리실','123','대전');
select * from division;
select * from division_history;
drop trigger t1;
insert into division values (3,'탕비실','123','서울');
select * from division;
select * from division_history;
---
delete division;
select * from division;

create table division_bk
as
select * from division;

select * from division_bk;
==행단위 트리거(for each row)
:old.컬럼명 - 트리거가 처리한 레코드의 원래값을 저장,지금 막 삭제된 행의 컬럼값
:new.컬럼명 - 트리거가 처리한 새값, 지금 막 삽입된 행의 컬럼값
create trigger t_division
	after insert on division
	for each row
begin
	insert into division_bk 
		values (:new.dno,:new.dname,:new.phone,:new.position);
end;
/
insert into division values (1,'전산실','123','인천');
insert into division values (2,'관리실','456','제주');
select * from division;
select * from division_bk;
--트리거 수정
create or replace trigger t_division
	after insert or update or delete on division
	for each row
begin
	if inserting then
		insert into division_bk 
			values (:new.dno,:new.dname,:new.phone,:new.position);
	elsif updating then
		update division_bk set dname=:new.dname,
								phone=:new.phone,
								position=:new.position
							where dno=:old.dno;
	elsif deleting then
		delete from division_bk where dno=:old.dno;
	end if;						
end;
/
update division set dname='it부',phone='000',position='서울' 
	where dno=1;
select * from division;
select * from division_bk;
delete from division where dno=1;
select * from division;
select * from division_bk;

--북미
수영복 2000      1000
스키복 1000      500

--남미
--유럽
--아시아

--아프리카
수영복 1000 ......500 재주문
스키복 100         50 재주문



























